package iit.musicrecognizer.adapter;

import iit.musicrecognizer.R;
import iit.musicrecognizer.RewardsActivity;
import iit.musicrecognizer.Runtime;
import iit.musicrecognizer.app.AppController;
import iit.musicrecognizer.model.Reward;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.List;

import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.NetworkImageView;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class RewardListAdapter extends BaseAdapter {
	
	private Activity activity;
	private LayoutInflater inflater;
	private List<Reward> rewardItems;
	ImageLoader imageLoader = AppController.getInstance().getImageLoader();
	String rewardID, rewardName, rewardValue;
	View view;
	private Reward r;
	int position;
	

	public RewardListAdapter(Activity activity, List<Reward> rewardItems) {
		super();
		this.activity = activity;
		this.rewardItems = rewardItems;
	}

	@Override
	public int getCount() {
		return rewardItems.size();
	}

	@Override
	public Object getItem(int position) {
		return rewardItems.get(position);
	}

	@Override
	public long getItemId(int position) {
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		
		view = convertView;
		this.position = position;
		
		if(inflater == null)
			inflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		
		if(convertView == null)
			convertView = inflater.inflate(R.layout.rewards_row_layout, null);
		
		NetworkImageView thumbNail = (NetworkImageView) convertView.findViewById(R.id.rewardsThumbnail);
		
		TextView name = (TextView) convertView.findViewById(R.id.txtRewardName);
		TextView description = (TextView) convertView.findViewById(R.id.txtRewardDesc);
		TextView value = (TextView) convertView.findViewById(R.id.txtRewardValue);
		Button redeem = (Button) convertView.findViewById(R.id.btnRewardRedeem);
		
		r = rewardItems.get(position);
		
		thumbNail.setImageUrl(r.getImage(), imageLoader);
		name.setText(r.getName());
		description.setText(r.getDesc());
		value.setText(r.getValue() + " Points");
		
		
        rewardID = r.getRewardID();
		rewardName = name.getText().toString();
		rewardValue = String.valueOf(r.getValue());
		
		redeem.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				System.out.println(rewardItems.get(position).getName());
				//new RedeemItem(view.getContext()).execute(rewardID, rewardName, rewardValue);
				
			}
		});
		
		
		return convertView;
	}
	
	
	private class RedeemItem extends AsyncTask<String, Long, String>{
		
		private Context context;
		private ProgressDialog progressDialog;

		public RedeemItem(Context context) {
			super();
			this.context = context;
		}
		
		@Override
		protected void onPreExecute() {
		    try {
		        progressDialog = ProgressDialog.show(context, "Redeem Rewards", "Please Wait...processing", true);
		    } catch (final Throwable th) {
		        //TODO
		    }
		}

		@Override
		protected String doInBackground(String... params) {
			String rewardID = params[0];
			String rewardName = params[1];
			String rewardValue = params[2];
			String userID = Runtime.getUserID();
			
			int urlID = R.string.url;
			String host = context.getResources().getString(urlID);
			
			String link = host + "redeem.php";
			StringBuilder sb = new StringBuilder();
			
			try{
				String data = URLEncoder.encode("rewardID", "UTF-8") + "=" + URLEncoder.encode(rewardID, "UTF-8");
				data += "&" + URLEncoder.encode("rewardName", "UTF-8") + "=" + URLEncoder.encode(rewardName, "UTF-8");
				data += "&" + URLEncoder.encode("rewardValue", "UTF-8") + "=" + URLEncoder.encode(rewardValue, "UTF-8");
				data += "&" + URLEncoder.encode("userID", "UTF-8") + "=" + URLEncoder.encode(userID, "UTF-8");
				
				URL url = new URL(link);
				URLConnection conn = url.openConnection();
				conn.setDoOutput(true); 
				OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 
			    wr.write( data ); 
			    wr.flush(); 
			    BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			    String line = null;
			    
			   //=== Get JSON Object from server ===
			    while((line = reader.readLine()) != null){
			    	sb.append(line);
			    	break;
			    }
			    
			} catch (Exception e){
				return new String("Exception: " + e.getMessage());
			}
			
			return sb.toString();
		}
		
		protected void onProgressUpdate(Long... progress) {
		    //do something
		    super.onProgressUpdate(progress);
		}
		
		protected void onPostExecute(String result){
			progressDialog.dismiss();
			Toast.makeText(context, result, Toast.LENGTH_LONG).show();
			System.out.println(result);
		}
		
	}

}
