package iit.musicrecognizer;

import iit.musicrecognizer.util.AndroidMultiPartEntity;
import iit.musicrecognizer.util.AndroidMultiPartEntity.ProgressListener;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.media.MediaPlayer;
import android.media.MediaRecorder;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

@SuppressWarnings("deprecation")
public class RecordTuneActivity extends Activity {
	
	private static final String TAG = RecordTuneActivity.class.getSimpleName();
	private MediaRecorder myAudioRecorder;
	private String outputFile = null;
	private Button start,stop,play, upload;
	private Spinner languageSpinner;
	private ProgressBar progressBar;
	private TextView txtPercentage;
	private Tune tune;
	long totalSize = 0;
	
	 
	private static final String[] languages = {"English", "Chinese/Mandarin", "Spanish", "Arabic", "Hindi", "Russain", "Sinhalese"};
	 
	 @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.recordtune_layout);
        start = (Button)findViewById(R.id.btnStartRecord);
        stop = (Button)findViewById(R.id.btnStopRecord);
        play = (Button)findViewById(R.id.btnPlayRecord);
        upload = (Button) findViewById(R.id.btnUploadTune);
        languageSpinner = (Spinner) findViewById(R.id.languagespinner);
        txtPercentage = (TextView) findViewById(R.id.txtUploadPercentage);
        progressBar = (ProgressBar) findViewById(R.id.uploadprogressBar);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(RecordTuneActivity.this, android.R.layout.simple_spinner_item, languages);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        languageSpinner.setAdapter(adapter);

        stop.setEnabled(false);
        play.setEnabled(false);
        outputFile = getOutputMediaFileUri();

        myAudioRecorder = new MediaRecorder();
        myAudioRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        myAudioRecorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);
        myAudioRecorder.setAudioEncoder(MediaRecorder.OutputFormat.AMR_NB);
        myAudioRecorder.setOutputFile(outputFile);


    }
	 
	 @Override
	    public boolean onCreateOptionsMenu(Menu menu) {
	        // Inflate the menu; this adds items to the action bar if it is present.
	        getMenuInflater().inflate(R.menu.main, menu);
	        return true;
	    }
	 
	 
	 public void record(View view){
	        try {
	            myAudioRecorder.prepare();
	            myAudioRecorder.start();
	        } catch (IllegalStateException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        } catch (IOException e) {
	            // TODO Auto-generated catch block
	            e.printStackTrace();
	        }
	        start.setEnabled(false);
	        stop.setEnabled(true);
	        Toast.makeText(getApplicationContext(), "Recording started", Toast.LENGTH_LONG).show();

	 }
	 
    public void stop(View view){
        myAudioRecorder.stop();
        myAudioRecorder.release();
        myAudioRecorder  = null;
        stop.setEnabled(false);
        play.setEnabled(true);
        Toast.makeText(getApplicationContext(), "Audio recorded successfully",
                Toast.LENGTH_LONG).show();
    }
    
    public void play(View view) throws IllegalArgumentException,
	    SecurityException, IllegalStateException, IOException{
	
		MediaPlayer m = new MediaPlayer();
		m.setDataSource(outputFile);
		m.prepare();
		m.start();
		Toast.makeText(getApplicationContext(), "Playing audio", Toast.LENGTH_LONG).show();
	}
    
	public void upload(View view){
		//myAudioRecorder
	}
	
	public String getOutputMediaFileUri() {
        return (getOutputMediaFile()).getAbsolutePath();
    }
	
	private static File getOutputMediaFile(){
		File mediaStorageDir = new File(Environment.getExternalStorageDirectory().getAbsoluteFile(), "/humzearch");
		
		// Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) {
            if (!mediaStorageDir.mkdirs()) {
                Log.d(TAG, "Oops! Failed create "
                        + "humzearch" + " directory");
                return null;
            }
        }
        
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
                Locale.getDefault()).format(new Date());
        
        File mediaFile;
        mediaFile = new File(mediaStorageDir + File.separator + "audio_" + timeStamp + ".3gp");
        try {
			mediaFile.createNewFile();
			Log.d(TAG, "file created.");
		} catch (IOException e) {
			e.printStackTrace();
		}
        
        return mediaFile;
	}
	
	
	
	//upload file to server inner class
	private class uploadFileToServer extends AsyncTask<Void, Integer, String>{

		@Override
		protected void onPreExecute() {
			progressBar.setProgress(0);
			super.onPreExecute();
		}
		
		@Override
		protected void onProgressUpdate(Integer... values) {
			progressBar.setVisibility(View.VISIBLE);
			progressBar.setProgress(values[0]);
			txtPercentage.setText(String.valueOf(values[0]) + "%");
		}
		
		@Override
		protected String doInBackground(Void... params) {
			return uploadFile();
		}


		@SuppressWarnings("deprecation")
		private String uploadFile() {
			String responseString = null;
			int urlID = R.string.url;
			String host = RecordTuneActivity.this.getResources().getString(urlID);
			
			HttpClient httpclint = new DefaultHttpClient();
			HttpPost httppost = new HttpPost(host + "uploadtune.php");
			
			try{
				AndroidMultiPartEntity entity = new AndroidMultiPartEntity(new ProgressListener() {
					
					@Override
					public void transferred(long num) {
						publishProgress((int) ((num / (float) totalSize) * 100));						
					}
				});
				
				File sourceFile = new File(outputFile);
				
				entity.addPart("tune", new FileBody(sourceFile));
				entity.addPart("userID", new StringBody("userID"));
				entity.addPart(bodyPart)
			} catch (Exception e){
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
		}

		
	}

}


