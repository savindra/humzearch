package iit.musicrecognizer;

import iit.musicrecognizer.adapter.RewardListAdapter;
import iit.musicrecognizer.app.AppController;
import iit.musicrecognizer.model.Reward;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;

import com.android.volley.Response;
import com.android.volley.VolleyLog;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonArrayRequest;

import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class RewardsActivity extends Activity {
	
private static final String TAG  = RewardsActivity.class.getSimpleName();
	
	int urlID;
	String host;
	private String url;
	private ProgressDialog pDialog;
	private List<Reward> rewardList = new ArrayList<Reward>();
	private ListView listView;
	private RewardListAdapter adapter;
	private Dialog dialog;
	private TextView name, desc, value;
	private ImageView img;
	
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.rewards_layout);
        
        urlID = R.string.url;
        host = this.getResources().getString(urlID);
        url = host + "getrewards.php";
        
        listView = (ListView) findViewById(R.id.rewardsListView);
        adapter = new RewardListAdapter(this, rewardList);
        listView.setAdapter(adapter);
        
        listView.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				
				dialog = new Dialog(RewardsActivity.this);
				dialog.setContentView(R.layout.rewards_dialog);
				
				dialog.setTitle("Redeem Rewards");
				
				img = (ImageView) dialog.findViewById(R.id.rewardsDialogImg);
				name = (TextView) dialog.findViewById(R.id.txtRewardDialogName);
				desc = (TextView) dialog.findViewById(R.id.txtRewardDialogDesc);
				value = (TextView) dialog.findViewById(R.id.txtRewardDialogvalue);
				
				img.setImageURI(Uri.parse(rewardList.get(position).getImage()));
				name.setText(rewardList.get(position).getName());
				desc.setText(rewardList.get(position).getDesc());
				value.setText(rewardList.get(position).getValue() + " Points");
						
				
				
			}
		});
                
        pDialog = new ProgressDialog(this);
        
        pDialog.setMessage("Loading...");
        pDialog.show();
        
        getActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor("#1b1b1b")));
        
        JsonArrayRequest rewardReq = new JsonArrayRequest(url, new Listener<JSONArray>() {

			@Override
			public void onResponse(JSONArray response) {
				Log.d(TAG, response.toString());
				hidePDialog();
				
				String dateString;
				SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				Date date;
				
				for(int i=0; i<response.length(); i++ ){
					try {
						JSONObject obj = response.getJSONObject(i);
						Reward reward = new Reward();
						
						reward.setRewardID(obj.getString("rewardID"));
						reward.setName(obj.getString("name"));
						reward.setDesc(obj.getString("description"));
						reward.setImage(host + obj.getString("image"));
						reward.setValue(obj.getInt("value"));
						reward.setQuantity(obj.getInt("quantity"));
						
						dateString = obj.getString("date_added");
						date = formatter.parse(dateString);
						
						reward.setDate_added(date);
						
						rewardList.add(reward);
						
					}catch(Exception e){
						e.printStackTrace();
					}
					
				}
				adapter.notifyDataSetChanged();
			}
		}, new Response.ErrorListener() {

			@Override
			public void onErrorResponse(VolleyError error) {
				VolleyLog.d(TAG, "Error: " + error.getMessage());
                hidePDialog();	
			}
		});
        
        
        AppController.getInstance().addToRequestQueue(rewardReq);
        
    }
	
	private void hidePDialog() {
		if (pDialog != null) {
            pDialog.dismiss();
            pDialog = null;
        }
		
	}


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
    public Context returnContext(){
    	return RewardsActivity.this;
    }
    
    
    private class RedeemItem extends AsyncTask<String, Long, String>{
		
		private Context context;
		private ProgressDialog progressDialog;

		public RedeemItem(Context context) {
			super();
			this.context = context;
		}
		
		@Override
		protected void onPreExecute() {
		    try {
		        progressDialog = ProgressDialog.show(context, "Redeem Rewards", "Please Wait...processing", true);
		    } catch (final Throwable th) {
		        //TODO
		    }
		}

		@Override
		protected String doInBackground(String... params) {
			String rewardID = params[0];
			String rewardName = params[1];
			String rewardValue = params[2];
			String userID = Runtime.getUserID();
			
			int urlID = R.string.url;
			String host = context.getResources().getString(urlID);
			
			String link = host + "redeem.php";
			StringBuilder sb = new StringBuilder();
			
			try{
				String data = URLEncoder.encode("rewardID", "UTF-8") + "=" + URLEncoder.encode(rewardID, "UTF-8");
				data += "&" + URLEncoder.encode("rewardName", "UTF-8") + "=" + URLEncoder.encode(rewardName, "UTF-8");
				data += "&" + URLEncoder.encode("rewardValue", "UTF-8") + "=" + URLEncoder.encode(rewardValue, "UTF-8");
				data += "&" + URLEncoder.encode("userID", "UTF-8") + "=" + URLEncoder.encode(userID, "UTF-8");
				
				URL url = new URL(link);
				URLConnection conn = url.openConnection();
				conn.setDoOutput(true); 
				OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()); 
			    wr.write( data ); 
			    wr.flush(); 
			    BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			    String line = null;
			    
			   //=== Get JSON Object from server ===
			    while((line = reader.readLine()) != null){
			    	sb.append(line);
			    	break;
			    }
			    
			} catch (Exception e){
				return new String("Exception: " + e.getMessage());
			}
			
			return sb.toString();
		}
		
		protected void onProgressUpdate(Long... progress) {
		    //do something
		    super.onProgressUpdate(progress);
		}
		
		protected void onPostExecute(String result){
			progressDialog.dismiss();
			Toast.makeText(context, result, Toast.LENGTH_LONG).show();
			System.out.println(result);
		}
		
	}

}
